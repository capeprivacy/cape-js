import type { AttestationDocument } from '@capeprivacy/types';
import { decodeAllSync } from 'cbor';
import 'cbor-rn-prereqs'; // Fixes TextDecoder not found issue and must be imported before cbor
import { Certificate, getCrypto } from 'pkijs';
import { ec } from 'elliptic';
import { sign } from 'cose-js';

/**
 * Parses an attestation document and returns the decoded payload.
 *
 * @param document The attestation document base64 encoded.
 * @returns The attestation document.
 */
export const parseAttestationDocument = (document: string): AttestationDocument => {
  const payloadArray = decodeAllSync(document, {
    preferWeb: true, // Uses Uint8Array over Buffer needed for Tink
    encoding: 'base64',
  })[0];
  if (!Array.isArray(payloadArray) || payloadArray.length !== 4) {
    throw new Error('Invalid attestation document');
  }
  return decodeAllSync(payloadArray[2], {
    preferWeb: true,
  })[0];
};

export const verifySignature = async (publicKey: string): Promise<boolean> => {
  const crypto = getCrypto();

  //const pem =
  //  '-----BEGIN CERTIFICATE-----\nMIICezCCAgGgAwIBAgIQAYH+dIT3SiQAAAAAYtCAjzAKBggqhkjOPQQDAzCBjjEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0\nbGUxDzANBgNVBAoMBkFtYXpvbjEMMAoGA1UECwwDQVdTMTkwNwYDVQQDDDBpLTAy\nOWUwZWFjYjY1MjY3Y2FhLnVzLWVhc3QtMi5hd3Mubml0cm8tZW5jbGF2ZXMwHhcN\nMjIwNzE0MjA0NjA0WhcNMjIwNzE0MjM0NjA3WjCBkzELMAkGA1UEBhMCVVMxEzAR\nBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxDzANBgNVBAoMBkFt\nYXpvbjEMMAoGA1UECwwDQVdTMT4wPAYDVQQDDDVpLTAyOWUwZWFjYjY1MjY3Y2Fh\nLWVuYzAxODFmZTc0ODRmNzRhMjQudXMtZWFzdC0yLmF3czB2MBAGByqGSM49AgEG\nBSuBBAAiA2IABAV56iqfGfjdMyXc5cKI47J9gIdxkkJyjRATnKfVSx+4RYO53Sqa\nb6BeljMJnI5DdC+gubDLqoIzFCSqxZWQ55FeDytA2PP3YaOH/KEOSoCe1Yi5sHWd\nAmBCuBPvGPZTJ6MdMBswDAYDVR0TAQH/BAIwADALBgNVHQ8EBAMCBsAwCgYIKoZI\nzj0EAwMDaAAwZQIwEQ+tuK1NHDAlS3rtWC0kieUZoZTOMaEdD7v2lQnp+zgJu6mU\n904Cx0QaI+kKzy0bAjEAne90J4+NEngbmOi8Sj9ebA+eKQ45/ntoSzdT9ArQuVXq\n9PETUpqM4vP+K6Rcp4BW\n-----END CERTIFICATE-----\n';
  const der =
    'MIICezCCAgGgAwIBAgIQAYH+dIT3SiQAAAAAYtCAjzAKBggqhkjOPQQDAzCBjjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxDzANBgNVBAoMBkFtYXpvbjEMMAoGA1UECwwDQVdTMTkwNwYDVQQDDDBpLTAyOWUwZWFjYjY1MjY3Y2FhLnVzLWVhc3QtMi5hd3Mubml0cm8tZW5jbGF2ZXMwHhcNMjIwNzE0MjA0NjA0WhcNMjIwNzE0MjM0NjA3WjCBkzELMAkGA1UEBhMCVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxDzANBgNVBAoMBkFtYXpvbjEMMAoGA1UECwwDQVdTMT4wPAYDVQQDDDVpLTAyOWUwZWFjYjY1MjY3Y2FhLWVuYzAxODFmZTc0ODRmNzRhMjQudXMtZWFzdC0yLmF3czB2MBAGByqGSM49AgEGBSuBBAAiA2IABAV56iqfGfjdMyXc5cKI47J9gIdxkkJyjRATnKfVSx+4RYO53Sqab6BeljMJnI5DdC+gubDLqoIzFCSqxZWQ55FeDytA2PP3YaOH/KEOSoCe1Yi5sHWdAmBCuBPvGPZTJ6MdMBswDAYDVR0TAQH/BAIwADALBgNVHQ8EBAMCBsAwCgYIKoZIzj0EAwMDaAAwZQIwEQ+tuK1NHDAlS3rtWC0kieUZoZTOMaEdD7v2lQnp+zgJu6mU904Cx0QaI+kKzy0bAjEAne90J4+NEngbmOi8Sj9ebA+eKQ45/ntoSzdT9ArQuVXq9PETUpqM4vP+K6Rcp4BW';

  const derBuf = Buffer.from(der, 'base64');

  const cert = Certificate.fromBER(derBuf);
  const pub = await cert.getPublicKey();
  const raw = await crypto?.exportKey('raw', pub);
  if (raw === undefined) {
    return false;
  }

  const EC = new ec('p384');
  const pair = EC.keyFromPublic(buf2hex(raw), 'hex');

  const verifier = {
    key: {
      x: Buffer.from(pair.getPublic().getX().toString('hex', 96), 'hex'),
      y: Buffer.from(pair.getPublic().getY().toString('hex', 96), 'hex'),
    },
  };
  const COSEMessage = Buffer.from(
    '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',
    'base64',
  );

  // 18 = Sign1Tag
  sign.verifySync(COSEMessage, verifier, { defaultType: 18 });

  return true;
};

function buf2hex(buffer: ArrayBuffer) {
  return [...new Uint8Array(buffer)].map((x) => x.toString(16).padStart(2, '0')).join('');
}
